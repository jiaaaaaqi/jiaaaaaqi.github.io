<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Bootstrap]]></title>
    <url>%2Fundefined%2FBootstrap%2F</url>
    <content type="text"><![CDATA[Bootstrap框架是一个非常受欢迎的前端开发框架，他能让后端程序员和不懂设计的前端人员制作出优美的Web页面或Web应用程序。 HTML5文档类型Bootstrap 使用到的某些 HTML 元素和 CSS 属性需要将页面设置为 HTML5 文档类型。在你项目中的每个页面都要参照下面的格式进行设置。 1234&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt; ...&lt;/html&gt; 移动设备优先Bootstrap 是移动设备优先的。针对移动设备的样式融合进了框架的每个角落，而不是增加一个额外的文件。 为了确保适当的绘制和触屏缩放，需要在 &lt;head&gt; 之中添加 viewport 元数据标签。 1&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt; 在移动设备浏览器上，通过为视口（viewport）设置 meta 属性为 user-scalable=no 可以禁用其缩放（zooming）功能。这样禁用缩放功能后，用户只能滚动屏幕，就能让你的网站看上去更像原生应用的感觉。注意，这种方式我们并不推荐所有网站使用，还是要看你自己的情况而定！ 1&lt;meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"&gt; 排版与链接Bootstrap 排版、链接样式设置了基本的全局样式。分别是： 为 body 元素设置 background-color: #fff; 使用 @font-family-base、@font-size-base 和 @line-height-base 变量作为排版的基本参数 为所有链接设置了基本颜色 @link-color ，并且当链接处于 :hover 状态时才添加下划线 这些样式都能在 scaffolding.less 文件中找到对应的源码。 布局容器Bootstrap 需要为页面内容和栅格系统包裹一个 .container 容器。我们提供了两个作此用处的类。注意，由于 padding 等属性的原因，这两种 容器类不能互相嵌套。 .container 类用于固定宽度并支持响应式布局的容器。 123&lt;div class="container"&gt; ...&lt;/div&gt; .container-fluid 类用于 100% 宽度，占据全部视口（viewport）的容器。 123&lt;div class="container-fluid"&gt; ...&lt;/div&gt; 栅格系统Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。它包含了易于使用的预定义类，还有强大的mixin 用于生成更具语义的布局。 简介栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。下面就介绍一下 Bootstrap 栅格系统的工作原理： “行（row）”必须包含在 .container （固定宽度）或 .container-fluid （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。 通过“行（row）”在水平方向创建一组“列（column）”。 你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。 类似 .row 和 .col-xs-4 这种预定义的类，可以用来快速创建栅格布局。Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。 通过为“列（column）”设置 padding 属性，从而创建列与列之间的间隔（gutter）。通过为 .row 元素设置负值 margin 从而抵消掉为 .container 元素设置的 padding，也就间接为“行（row）”所包含的“列（column）”抵消掉了padding。 负值的 margin就是下面的示例为什么是向外突出的原因。在栅格列中的内容排成一行。 栅格系统中的列是通过指定1到12的值来表示其跨越的范围。例如，三个等宽的列可以使用三个 .col-xs-4 来创建。 如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列。 栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 .col-md-*栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 .col-lg-*不存在， 也影响大屏幕设备。 媒体查询在栅格系统中，我们在 Less 文件中使用以下媒体查询（media query）来创建关键的分界点阈值。 1234567891011/* 超小屏幕（手机，小于 768px） *//* 没有任何媒体查询相关的代码，因为这在 Bootstrap 中是默认的（还记得 Bootstrap 是移动设备优先的吗？） *//* 小屏幕（平板，大于等于 768px） */@media (min-width: @screen-sm-min) &#123; ... &#125;/* 中等屏幕（桌面显示器，大于等于 992px） */@media (min-width: @screen-md-min) &#123; ... &#125;/* 大屏幕（大桌面显示器，大于等于 1200px） */@media (min-width: @screen-lg-min) &#123; ... &#125; 我们偶尔也会在媒体查询代码中包含 max-width 从而将 CSS 的影响限制在更小范围的屏幕大小之内。 1234@media (max-width: @screen-xs-max) &#123; ... &#125;@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) &#123; ... &#125;@media (min-width: @screen-md-min) and (max-width: @screen-md-max) &#123; ... &#125;@media (min-width: @screen-lg-min) &#123; ... &#125; 栅格参数通过下表可以详细查看 Bootstrap 的栅格系统是如何在多种屏幕设备上工作的。 超小屏幕 手机 (&lt;768px) 小屏幕 平板 (≥768px) 中等屏幕 桌面显示器 (≥992px) 大屏幕 大桌面显示器 (≥1200px) 栅格系统行为 总是水平排列 开始是堆叠在一起的，当大于这些阈值时将变为水平排列C .container 最大宽度 None （自动） 750px 970px 1170px 类前缀 .col-xs- .col-sm- .col-md- .col-lg- 列（column）数 12 最大列（column）宽 自动 ~62px ~81px ~97px 槽（gutter）宽 30px （每列左右均有 15px） 可嵌套 是 偏移（Offsets） 是 列排序 是 实例：从堆叠到水平排列使用单一的一组 .col-md-* 栅格类，就可以创建一个基本的栅格系统，在手机和平板设备上一开始是堆叠在一起的（超小屏幕到小屏幕这一范围），在桌面（中等）屏幕设备上变为水平排列。所有“列（column）必须放在 ” .row 内。 123456789101112131415161718192021222324252627&lt;div class="row"&gt; &lt;div class="col-md-1"&gt;.col-md-1&lt;/div&gt; &lt;div class="col-md-1"&gt;.col-md-1&lt;/div&gt; &lt;div class="col-md-1"&gt;.col-md-1&lt;/div&gt; &lt;div class="col-md-1"&gt;.col-md-1&lt;/div&gt; &lt;div class="col-md-1"&gt;.col-md-1&lt;/div&gt; &lt;div class="col-md-1"&gt;.col-md-1&lt;/div&gt; &lt;div class="col-md-1"&gt;.col-md-1&lt;/div&gt; &lt;div class="col-md-1"&gt;.col-md-1&lt;/div&gt; &lt;div class="col-md-1"&gt;.col-md-1&lt;/div&gt; &lt;div class="col-md-1"&gt;.col-md-1&lt;/div&gt; &lt;div class="col-md-1"&gt;.col-md-1&lt;/div&gt; &lt;div class="col-md-1"&gt;.col-md-1&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt; &lt;div class="col-md-8"&gt;.col-md-8&lt;/div&gt; &lt;div class="col-md-4"&gt;.col-md-4&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt; &lt;div class="col-md-4"&gt;.col-md-4&lt;/div&gt; &lt;div class="col-md-4"&gt;.col-md-4&lt;/div&gt; &lt;div class="col-md-4"&gt;.col-md-4&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt; &lt;div class="col-md-6"&gt;.col-md-6&lt;/div&gt; &lt;div class="col-md-6"&gt;.col-md-6&lt;/div&gt;&lt;/div&gt; 实例：流式布局容器将最外面的布局元素 .container 修改为 .container-fluid，就可以将固定宽度的栅格布局转换为 100% 宽度的布局。 12345&lt;div class="container-fluid"&gt; &lt;div class="row"&gt; ... &lt;/div&gt;&lt;/div&gt; 实例：移动设备和桌面屏幕是否不希望在小屏幕设备上所有列都堆叠在一起？那就使用针对超小屏幕和中等屏幕设备所定义的类吧，即 .col-xs-* 和 .col-md-*。 123456789101112131415161718&lt;!-- Stack the columns on mobile by making one full-width and the other half-width --&gt;&lt;div class="row"&gt; &lt;div class="col-xs-12 col-md-8"&gt;.col-xs-12 .col-md-8&lt;/div&gt; &lt;div class="col-xs-6 col-md-4"&gt;.col-xs-6 .col-md-4&lt;/div&gt;&lt;/div&gt;&lt;!-- Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop --&gt;&lt;div class="row"&gt; &lt;div class="col-xs-6 col-md-4"&gt;.col-xs-6 .col-md-4&lt;/div&gt; &lt;div class="col-xs-6 col-md-4"&gt;.col-xs-6 .col-md-4&lt;/div&gt; &lt;div class="col-xs-6 col-md-4"&gt;.col-xs-6 .col-md-4&lt;/div&gt;&lt;/div&gt;&lt;!-- Columns are always 50% wide, on mobile and desktop --&gt;&lt;div class="row"&gt; &lt;div class="col-xs-6"&gt;.col-xs-6&lt;/div&gt; &lt;div class="col-xs-6"&gt;.col-xs-6&lt;/div&gt;&lt;/div&gt; 实例：手机、平板、桌面在上面案例的基础上，通过使用针对平板设备的 .col-sm-* 类，我们来创建更加动态和强大的布局吧。 1234567891011&lt;div class="row"&gt; &lt;div class="col-xs-12 col-sm-6 col-md-8"&gt;.col-xs-12 .col-sm-6 .col-md-8&lt;/div&gt; &lt;div class="col-xs-6 col-md-4"&gt;.col-xs-6 .col-md-4&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt; &lt;div class="col-xs-6 col-sm-4"&gt;.col-xs-6 .col-sm-4&lt;/div&gt; &lt;div class="col-xs-6 col-sm-4"&gt;.col-xs-6 .col-sm-4&lt;/div&gt; &lt;!-- Optional: clear the XS cols if their content doesn't match in height --&gt; &lt;div class="clearfix visible-xs-block"&gt;&lt;/div&gt; &lt;div class="col-xs-6 col-sm-4"&gt;.col-xs-6 .col-sm-4&lt;/div&gt;&lt;/div&gt; 实例：多余的列（column）将另起一行排列如果在一个 .row 内包含的列（column）大于12个，包含多余列（column）的元素将作为一个整体单元被另起一行排列。 12345&lt;div class="row"&gt; &lt;div class="col-xs-9"&gt;.col-xs-9&lt;/div&gt; &lt;div class="col-xs-4"&gt;.col-xs-4&lt;br&gt;Since 9 + 4 = 13 &amp;gt; 12, this 4-column-wide div gets wrapped onto a new line as one contiguous unit.&lt;/div&gt; &lt;div class="col-xs-6"&gt;.col-xs-6&lt;br&gt;Subsequent columns continue along the new line.&lt;/div&gt;&lt;/div&gt; 响应式列重置即便有上面给出的四组栅格class，也不免会碰到一些问题，例如，在某些阈值时，某些列可能会出现比别的列高的情况。为了克服这一问题，建议联合使用 .clearfix 和 响应式工具类。 12345678910&lt;div class="row"&gt; &lt;div class="col-xs-6 col-sm-3"&gt;.col-xs-6 .col-sm-3&lt;/div&gt; &lt;div class="col-xs-6 col-sm-3"&gt;.col-xs-6 .col-sm-3&lt;/div&gt; &lt;!-- Add the extra clearfix for only the required viewport --&gt; &lt;div class="clearfix visible-xs-block"&gt;&lt;/div&gt; &lt;div class="col-xs-6 col-sm-3"&gt;.col-xs-6 .col-sm-3&lt;/div&gt; &lt;div class="col-xs-6 col-sm-3"&gt;.col-xs-6 .col-sm-3&lt;/div&gt;&lt;/div&gt; 除了列在分界点清除响应， 您可能需要 重置偏移, 后推或前拉某个列。请看此栅格实例。 123456789&lt;div class="row"&gt; &lt;div class="col-sm-5 col-md-6"&gt;.col-sm-5 .col-md-6&lt;/div&gt; &lt;div class="col-sm-5 col-sm-offset-2 col-md-6 col-md-offset-0"&gt;.col-sm-5 .col-sm-offset-2 .col-md-6 .col-md-offset-0&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt; &lt;div class="col-sm-6 col-md-5 col-lg-6"&gt;.col-sm-6 .col-md-5 .col-lg-6&lt;/div&gt; &lt;div class="col-sm-6 col-md-5 col-md-offset-2 col-lg-6 col-lg-offset-0"&gt;.col-sm-6 .col-md-5 .col-md-offset-2 .col-lg-6 .col-lg-offset-0&lt;/div&gt;&lt;/div&gt; 列偏移使用 .col-md-offset-* 类可以将列向右侧偏移。这些类实际是通过使用 * 选择器为当前元素增加了左侧的边距（margin）。例如，.col-md-offset-4 类将 .col-md-4 元素向右侧偏移了4个列（column）的宽度。 1234567891011&lt;div class="row"&gt; &lt;div class="col-md-4"&gt;.col-md-4&lt;/div&gt; &lt;div class="col-md-4 col-md-offset-4"&gt;.col-md-4 .col-md-offset-4&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt; &lt;div class="col-md-3 col-md-offset-3"&gt;.col-md-3 .col-md-offset-3&lt;/div&gt; &lt;div class="col-md-3 col-md-offset-3"&gt;.col-md-3 .col-md-offset-3&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt; &lt;div class="col-md-6 col-md-offset-3"&gt;.col-md-6 .col-md-offset-3&lt;/div&gt;&lt;/div&gt; You can also override offsets from lower grid tiers with .col-*-offset-0 classes. 12345678&lt;div class="row"&gt; &lt;div class="col-xs-6 col-sm-4"&gt; &lt;/div&gt; &lt;div class="col-xs-6 col-sm-4"&gt; &lt;/div&gt; &lt;div class="col-xs-6 col-xs-offset-3 col-sm-4 col-sm-offset-0"&gt; &lt;/div&gt;&lt;/div&gt; 嵌套列为了使用内置的栅格系统将内容再次嵌套，可以通过添加一个新的 .row 元素和一系列 .col-sm-* 元素到已经存在的 .col-sm-* 元素内。被嵌套的行（row）所包含的列（column）的个数不能超过12（其实，没有要求你必须占满12列）。 12345678910111213&lt;div class="row"&gt; &lt;div class="col-sm-9"&gt; Level 1: .col-sm-9 &lt;div class="row"&gt; &lt;div class="col-xs-8 col-sm-6"&gt; Level 2: .col-xs-8 .col-sm-6 &lt;/div&gt; &lt;div class="col-xs-4 col-sm-6"&gt; Level 2: .col-xs-4 .col-sm-6 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 列排序通过使用 .col-md-push-* 和 .col-md-pull-* 类就可以很容易的改变列（column）的顺序。 1234&lt;div class="row"&gt; &lt;div class="col-md-9 col-md-push-3"&gt;.col-md-9 .col-md-push-3&lt;/div&gt; &lt;div class="col-md-3 col-md-pull-9"&gt;.col-md-3 .col-md-pull-9&lt;/div&gt;&lt;/div&gt; 排版标题HTML 中的所有标题标签，&lt;h1&gt; 到 &lt;h6&gt; 均可使用。另外，还提供了 .h1 到 .h6 类，为的是给内联（inline）属性的文本赋予标题的样式。 h1. Bootstrap heading Semibold 36px h2. Bootstrap heading Semibold 30px h3. Bootstrap heading Semibold 24px h4. Bootstrap heading Semibold 18px h5. Bootstrap heading Semibold 14px h6. Bootstrap heading Semibold 12px 123456&lt;h1&gt;h1. Bootstrap heading&lt;/h1&gt;&lt;h2&gt;h2. Bootstrap heading&lt;/h2&gt;&lt;h3&gt;h3. Bootstrap heading&lt;/h3&gt;&lt;h4&gt;h4. Bootstrap heading&lt;/h4&gt;&lt;h5&gt;h5. Bootstrap heading&lt;/h5&gt;&lt;h6&gt;h6. Bootstrap heading&lt;/h6&gt; 在标题内还可以包含 &lt;small&gt; 标签或赋予 .small 类的元素，可以用来标记副标题。 123456&lt;h1&gt;h1. Bootstrap heading &lt;small&gt;Secondary text&lt;/small&gt;&lt;/h1&gt;&lt;h2&gt;h2. Bootstrap heading &lt;small&gt;Secondary text&lt;/small&gt;&lt;/h2&gt;&lt;h3&gt;h3. Bootstrap heading &lt;small&gt;Secondary text&lt;/small&gt;&lt;/h3&gt;&lt;h4&gt;h4. Bootstrap heading &lt;small&gt;Secondary text&lt;/small&gt;&lt;/h4&gt;&lt;h5&gt;h5. Bootstrap heading &lt;small&gt;Secondary text&lt;/small&gt;&lt;/h5&gt;&lt;h6&gt;h6. Bootstrap heading &lt;small&gt;Secondary text&lt;/small&gt;&lt;/h6&gt; 页面主体Bootstrap 将全局 font-size 设置为 14px，line-height 设置为 1.428。这些属性直接赋予 &lt;body&gt; 元素和所有段落元素。另外，&lt;p&gt; （段落）元素还被设置了等于 1/2 行高（即 10px）的底部外边距（margin）。 中心内容通过添加 .lead 类可以让段落突出显示。 1&lt;p class="lead"&gt;...&lt;/p&gt; 内联文本元素Marked text1You can use the mark tag to &lt;mark&gt;highlight&lt;/mark&gt; text. 被删除的文本对于被删除的文本使用 &lt;del&gt; 标签。 This line of text is meant to be treated as deleted text. 1&lt;del&gt;This line of text is meant to be treated as deleted text.&lt;/del&gt; 无用文本对于没用的文本使用 &lt;s&gt; 标签。 1&lt;s&gt;This line of text is meant to be treated as no longer accurate.&lt;/s&gt; 插入文本额外插入的文本使用 &lt;ins&gt; 标签。 1&lt;ins&gt;This line of text is meant to be treated as an addition to the document.&lt;/ins&gt; 带下划线的文本为文本添加下划线，使用 &lt;u&gt; 标签。 This line of text will render as underlined 1&lt;u&gt;This line of text will render as underlined&lt;/u&gt; 利用 HTML 自带的表示强调意味的标签来为文本增添少量样式。 小号文本对于不需要强调的inline或block类型的文本，使用 &lt;small&gt; 标签包裹，其内的文本将被设置为父容器字体大小的 85%。标题元素中嵌套的 &lt;small&gt; 元素被设置不同的 font-size 。 你还可以为行内元素赋予 .small 类以代替任何 &lt;small&gt; 元素。 1&lt;small&gt;This line of text is meant to be treated as fine print.&lt;/small&gt; 着重通过增加 font-weight 值强调一段文本。 The following snippet of text is rendered as bold text. 1&lt;strong&gt;rendered as bold text&lt;/strong&gt; 斜体用斜体强调一段文本。 The following snippet of text is rendered as italicized text. 1&lt;em&gt;rendered as italicized text&lt;/em&gt; Alternate elements在 HTML5 中可以放心使用 &lt;b&gt; 和 &lt;i&gt; 标签。&lt;b&gt; 用于高亮单词或短语，不带有任何着重的意味；而 &lt;i&gt; 标签主要用于发言、技术词汇等。 对齐通过文本对齐类，可以简单方便的将文字重新对齐。 12345&lt;p class="text-left"&gt;Left aligned text.&lt;/p&gt;&lt;p class="text-center"&gt;Center aligned text.&lt;/p&gt;&lt;p class="text-right"&gt;Right aligned text.&lt;/p&gt;&lt;p class="text-justify"&gt;Justified text.&lt;/p&gt;&lt;p class="text-nowrap"&gt;No wrap text.&lt;/p&gt; 改变大小写通过这几个类可以改变文本的大小写。 lowercased text. UPPERCASED TEXT. Capitalized Text. 123&lt;p class="text-lowercase"&gt;Lowercased text.&lt;/p&gt;&lt;p class="text-uppercase"&gt;Uppercased text.&lt;/p&gt;&lt;p class="text-capitalize"&gt;Capitalized text.&lt;/p&gt; 缩略语当鼠标悬停在缩写和缩写词上时就会显示完整内容，Bootstrap 实现了对 HTML 的 &lt;abbr&gt; 元素的增强样式。缩略语元素带有 title 属性，外观表现为带有较浅的虚线框，鼠标移至上面时会变成带有“问号”的指针。如想看完整的内容可把鼠标悬停在缩略语上（对使用辅助技术的用户也可见）, 但需要包含 title 属性。 基本缩略语1&lt;abbr title="attribute"&gt;attr&lt;/abbr&gt; 首字母缩略语为缩略语添加 .initialism 类，可以让 font-size 变得稍微小些。 1&lt;abbr title="HyperText Markup Language" class="initialism"&gt;HTML&lt;/abbr&gt; 地址让联系信息以最接近日常使用的格式呈现。在每行结尾添加 &lt;br&gt; 可以保留需要的样式。 Twitter, Inc.1355 Market Street, Suite 900San Francisco, CA 94103P: (123) 456-7890Full Namefirst.last@example.com 1234567891011&lt;address&gt; &lt;strong&gt;Twitter, Inc.&lt;/strong&gt;&lt;br&gt; 1355 Market Street, Suite 900&lt;br&gt; San Francisco, CA 94103&lt;br&gt; &lt;abbr title="Phone"&gt;P:&lt;/abbr&gt; (123) 456-7890&lt;/address&gt;&lt;address&gt; &lt;strong&gt;Full Name&lt;/strong&gt;&lt;br&gt; &lt;a href="mailto:#"&gt;first.last@example.com&lt;/a&gt;&lt;/address&gt; 引用在你的文档中引用其他来源的内容。 默认样式的引用将任何 HTML 元素包裹在 &lt;blockquote&gt; 中即可表现为引用样式。对于直接引用，我们建议用 &lt;p&gt; 标签。 实例 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. 123&lt;blockquote&gt; &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.&lt;/p&gt;&lt;/blockquote&gt; 多种引用样式对于标准样式的 &lt;blockquote&gt;，可以通过几个简单的变体就能改变风格和内容。 命名来源添加 &lt;footer&gt; 用于标明引用来源。来源的名称可以包裹进 &lt;cite&gt;标签中。 1234&lt;blockquote&gt; &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.&lt;/p&gt; &lt;footer&gt;Someone famous in &lt;cite title="Source Title"&gt;Source Title&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt; 另一种展示风格通过赋予 .blockquote-reverse 类可以让引用呈现内容右对齐的效果。 123&lt;blockquote class="blockquote-reverse"&gt; ...&lt;/blockquote&gt; 内联列表通过设置 display: inline-block; 并添加少量的内补（padding），将所有元素放置于同一行。 123&lt;ul class="list-inline"&gt; &lt;li&gt;...&lt;/li&gt;&lt;/ul&gt; 水平排列的描述.dl-horizontal 可以让 &lt;dl&gt; 内的短语及其描述排在一行。开始是像 &lt;dl&gt; 的默认样式堆叠在一起，随着导航条逐渐展开而排列在一行。 1234&lt;dl class="dl-horizontal"&gt; &lt;dt&gt;...&lt;/dt&gt; &lt;dd&gt;...&lt;/dd&gt;&lt;/dl&gt; 自动截断 通过 text-overflow 属性，水平排列的描述列表将会截断左侧太长的短语。在较窄的视口（viewport）内，列表将变为默认堆叠排列的布局方式。 代码内联代码通过 &lt;code&gt; 标签包裹内联样式的代码片段。 1For example, &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; should be wrapped as inline. 用户输入通过 &lt;kbd&gt; 标签标记用户通过键盘输入的内容。 12To switch directories, type &lt;kbd&gt;cd&lt;/kbd&gt; followed by the name of the directory.&lt;br&gt;To edit settings, press &lt;kbd&gt;&lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;,&lt;/kbd&gt;&lt;/kbd&gt; 代码块多行代码可以使用 &lt;pre&gt; 标签。为了正确的展示代码，注意将尖括号做转义处理。 12&lt;p&gt;Sample text here...&lt;/p&gt;&lt;pre&gt;&amp;lt;p&amp;gt;Sample text here...&amp;lt;/p&amp;gt;&lt;/pre&gt; 还可以使用 .pre-scrollable 类，其作用是设置 max-height 为 350px ，并在垂直方向展示滚动条。 变量通过 &lt;var&gt; 标签标记变量。 y = mx + b 1&lt;var&gt;y&lt;/var&gt; = &lt;var&gt;m&lt;/var&gt;&lt;var&gt;x&lt;/var&gt; + &lt;var&gt;b&lt;/var&gt; 程序输出通过 &lt;samp&gt; 标签来标记程序输出的内容。 1&lt;samp&gt;This text is meant to be treated as sample output from a computer program.&lt;/samp&gt; 表格基本实例为任意 &lt;table&gt; 标签添加 .table 类可以为其赋予基本的样式 — 少量的内补（padding）和水平方向的分隔线。这种方式看起来很多余！？但是我们觉得，表格元素使用的很广泛，如果我们为其赋予默认样式可能会影响例如日历和日期选择之类的插件，所以我们选择将此样式独立出来。 123&lt;table class="table"&gt; ...&lt;/table&gt; 条纹状表格通过 .table-striped 类可以给 &lt;tbody&gt; 之内的每一行增加斑马条纹样式。 跨浏览器兼容性条纹状表格是依赖 :nth-child CSS 选择器实现的，而这一功能不被 Internet Explorer 8 支持。 123&lt;table class="table table-striped"&gt; ...&lt;/table&gt; 带边框的表格添加 .table-bordered 类为表格和其中的每个单元格增加边框。 123&lt;table class="table table-bordered"&gt; ...&lt;/table&gt; 鼠标悬停通过添加 .table-hover 类可以让 &lt;tbody&gt; 中的每一行对鼠标悬停状态作出响应。 123&lt;table class="table table-hover"&gt; ...&lt;/table&gt; 紧缩表格通过添加 .table-condensed 类可以让表格更加紧凑，单元格中的内补（padding）均会减半。 123&lt;table class="table table-condensed"&gt; ...&lt;/table&gt; 状态类通过这些状态类可以为行或单元格设置颜色。 Class 描述 .active 鼠标悬停在行或单元格上时所设置的颜色 .success 标识成功或积极的动作 .info 标识普通的提示信息或动作 .warning 标识警告或需要用户注意 .danger 标识危险或潜在的带来负面影响的动作 123456789101112131415&lt;!-- On rows --&gt;&lt;tr class="active"&gt;...&lt;/tr&gt;&lt;tr class="success"&gt;...&lt;/tr&gt;&lt;tr class="warning"&gt;...&lt;/tr&gt;&lt;tr class="danger"&gt;...&lt;/tr&gt;&lt;tr class="info"&gt;...&lt;/tr&gt;&lt;!-- On cells (`td` or `th`) --&gt;&lt;tr&gt; &lt;td class="active"&gt;...&lt;/td&gt; &lt;td class="success"&gt;...&lt;/td&gt; &lt;td class="warning"&gt;...&lt;/td&gt; &lt;td class="danger"&gt;...&lt;/td&gt; &lt;td class="info"&gt;...&lt;/td&gt;&lt;/tr&gt; 响应式表格将任何 .table 元素包裹在 .table-responsive 元素内，即可创建响应式表格，其会在小屏幕设备上（小于768px）水平滚动。当屏幕大于 768px 宽度时，水平滚动条消失。 垂直方向的内容截断响应式表格使用了 overflow-y: hidden 属性，这样就能将超出表格底部和顶部的内容截断。特别是，也可以截断下拉菜单和其他第三方组件。 Firefox 和 fieldset 元素Firefox 浏览器对 fieldset 元素设置了一些影响 width 属性的样式，导致响应式表格出现问题。可以使用下面提供的针对 Firefox 的 hack 代码解决，但是以下代码并未集成在 Bootstrap 中： 123@-moz-document url-prefix() &#123; fieldset &#123; display: table-cell; &#125;&#125; 更多信息请参考 this Stack Overflow answer. 实例 12345&lt;div class="table-responsive"&gt; &lt;table class="table"&gt; ... &lt;/table&gt;&lt;/div&gt; 表单基本实例单独的表单控件会被自动赋予一些全局样式。所有设置了 .form-control 类的 &lt;input&gt;、&lt;textarea&gt; 和 &lt;select&gt; 元素都将被默认设置宽度属性为 width: 100%;。 将 label 元素和前面提到的控件包裹在 .form-group 中可以获得最好的排列。 123456789101112131415161718192021&lt;form&gt; &lt;div class="form-group"&gt; &lt;label for="exampleInputEmail1"&gt;Email address&lt;/label&gt; &lt;input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email"&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label for="exampleInputPassword1"&gt;Password&lt;/label&gt; &lt;input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password"&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label for="exampleInputFile"&gt;File input&lt;/label&gt; &lt;input type="file" id="exampleInputFile"&gt; &lt;p class="help-block"&gt;Example block-level help text here.&lt;/p&gt; &lt;/div&gt; &lt;div class="checkbox"&gt; &lt;label&gt; &lt;input type="checkbox"&gt; Check me out &lt;/label&gt; &lt;/div&gt; &lt;button type="submit" class="btn btn-default"&gt;Submit&lt;/button&gt;&lt;/form&gt; 不要将表单组和输入框组混合使用不要将表单组直接和输入框组混合使用。建议将输入框组嵌套到表单组中使用。 内联表单为 &lt;form&gt; 元素添加 .form-inline 类可使其内容左对齐并且表现为 inline-block 级别的控件。只适用于视口（viewport）至少在 768px 宽度时（视口宽度再小的话就会使表单折叠）。 可能需要手动设置宽度在 Bootstrap 中，输入框和单选/多选框控件默认被设置为 width: 100%; 宽度。在内联表单，我们将这些元素的宽度设置为 width: auto;，因此，多个控件可以排列在同一行。根据你的布局需求，可能需要一些额外的定制化组件。 一定要添加 label 标签如果你没有为每个输入控件设置 label 标签，屏幕阅读器将无法正确识别。对于这些内联表单，你可以通过为 label 设置 .sr-only 类将其隐藏。还有一些辅助技术提供label标签的替代方案，比如 aria-label、aria-labelledby 或 title 属性。如果这些都不存在，屏幕阅读器可能会采取使用 placeholder 属性，如果存在的话，使用占位符来替代其他的标记，但要注意，这种方法是不妥当的。 1234567891011&lt;form class="form-inline"&gt; &lt;div class="form-group"&gt; &lt;label for="exampleInputName2"&gt;Name&lt;/label&gt; &lt;input type="text" class="form-control" id="exampleInputName2" placeholder="Jane Doe"&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label for="exampleInputEmail2"&gt;Email&lt;/label&gt; &lt;input type="email" class="form-control" id="exampleInputEmail2" placeholder="jane.doe@example.com"&gt; &lt;/div&gt; &lt;button type="submit" class="btn btn-default"&gt;Send invitation&lt;/button&gt;&lt;/form&gt; 12345678910111213141516&lt;form class="form-inline"&gt; &lt;div class="form-group"&gt; &lt;label class="sr-only" for="exampleInputEmail3"&gt;Email address&lt;/label&gt; &lt;input type="email" class="form-control" id="exampleInputEmail3" placeholder="Email"&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label class="sr-only" for="exampleInputPassword3"&gt;Password&lt;/label&gt; &lt;input type="password" class="form-control" id="exampleInputPassword3" placeholder="Password"&gt; &lt;/div&gt; &lt;div class="checkbox"&gt; &lt;label&gt; &lt;input type="checkbox"&gt; Remember me &lt;/label&gt; &lt;/div&gt; &lt;button type="submit" class="btn btn-default"&gt;Sign in&lt;/button&gt;&lt;/form&gt; 1234567891011&lt;form class="form-inline"&gt; &lt;div class="form-group"&gt; &lt;label class="sr-only" for="exampleInputAmount"&gt;Amount (in dollars)&lt;/label&gt; &lt;div class="input-group"&gt; &lt;div class="input-group-addon"&gt;$&lt;/div&gt; &lt;input type="text" class="form-control" id="exampleInputAmount" placeholder="Amount"&gt; &lt;div class="input-group-addon"&gt;.00&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;button type="submit" class="btn btn-primary"&gt;Transfer cash&lt;/button&gt;&lt;/form&gt; 水平排列的表单通过为表单添加 .form-horizontal 类，并联合使用 Bootstrap 预置的栅格类，可以将 label 标签和控件组水平并排布局。这样做将改变 .form-group 的行为，使其表现为栅格系统中的行（row），因此就无需再额外添加 .row 了。 12345678910111213141516171819202122232425262728&lt;form class="form-horizontal"&gt; &lt;div class="form-group"&gt; &lt;label for="inputEmail3" class="col-sm-2 control-label"&gt;Email&lt;/label&gt; &lt;div class="col-sm-10"&gt; &lt;input type="email" class="form-control" id="inputEmail3" placeholder="Email"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label for="inputPassword3" class="col-sm-2 control-label"&gt;Password&lt;/label&gt; &lt;div class="col-sm-10"&gt; &lt;input type="password" class="form-control" id="inputPassword3" placeholder="Password"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;div class="col-sm-offset-2 col-sm-10"&gt; &lt;div class="checkbox"&gt; &lt;label&gt; &lt;input type="checkbox"&gt; Remember me &lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;div class="col-sm-offset-2 col-sm-10"&gt; &lt;button type="submit" class="btn btn-default"&gt;Sign in&lt;/button&gt; &lt;/div&gt; &lt;/div&gt;&lt;/form&gt; 被支持的控件表单布局实例中展示了其所支持的标准表单控件。 输入框包括大部分表单控件、文本输入域控件，还支持所有 HTML5 类型的输入控件： text、password、datetime、datetime-local、date、month、time、week、number、email、url、search、tel 和 color。 必须添加类型声明只有正确设置了 type 属性的输入控件才能被赋予正确的样式。 1&lt;input type="text" class="form-control" placeholder="Text input"&gt; 输入控件组如需在文本输入域 &lt;input&gt; 前面或后面添加文本内容或按钮控件，请参考输入控件组。 文本域支持多行文本的表单控件。可根据需要改变 rows 属性。 1&lt;textarea class="form-control" rows="3"&gt;&lt;/textarea&gt; 多选和单选框多选框（checkbox）用于选择列表中的一个或多个选项，而单选框（radio）用于从多个选项中只选择一个。 Disabled checkboxes and radios are supported, but to provide a “not-allowed” cursor on hover of the parent &lt;label&gt;, you’ll need to add the .disabled class to the parent .radio, .radio-inline, .checkbox, or .checkbox-inline. 默认外观（堆叠在一起）12345678910111213141516171819202122232425262728293031&lt;div class="checkbox"&gt; &lt;label&gt; &lt;input type="checkbox" value=""&gt; Option one is this and that&amp;mdash;be sure to include why it's great &lt;/label&gt;&lt;/div&gt;&lt;div class="checkbox disabled"&gt; &lt;label&gt; &lt;input type="checkbox" value="" disabled&gt; Option two is disabled &lt;/label&gt;&lt;/div&gt;&lt;div class="radio"&gt; &lt;label&gt; &lt;input type="radio" name="optionsRadios" id="optionsRadios1" value="option1" checked&gt; Option one is this and that&amp;mdash;be sure to include why it's great &lt;/label&gt;&lt;/div&gt;&lt;div class="radio"&gt; &lt;label&gt; &lt;input type="radio" name="optionsRadios" id="optionsRadios2" value="option2"&gt; Option two can be something else and selecting it will deselect option one &lt;/label&gt;&lt;/div&gt;&lt;div class="radio disabled"&gt; &lt;label&gt; &lt;input type="radio" name="optionsRadios" id="optionsRadios3" value="option3" disabled&gt; Option three is disabled &lt;/label&gt;&lt;/div&gt; 内联单选和多选框通过将 .checkbox-inline 或 .radio-inline 类应用到一系列的多选框（checkbox）或单选框（radio）控件上，可以使这些控件排列在一行。 12345678910111213141516171819&lt;label class="checkbox-inline"&gt; &lt;input type="checkbox" id="inlineCheckbox1" value="option1"&gt; 1&lt;/label&gt;&lt;label class="checkbox-inline"&gt; &lt;input type="checkbox" id="inlineCheckbox2" value="option2"&gt; 2&lt;/label&gt;&lt;label class="checkbox-inline"&gt; &lt;input type="checkbox" id="inlineCheckbox3" value="option3"&gt; 3&lt;/label&gt;&lt;label class="radio-inline"&gt; &lt;input type="radio" name="inlineRadioOptions" id="inlineRadio1" value="option1"&gt; 1&lt;/label&gt;&lt;label class="radio-inline"&gt; &lt;input type="radio" name="inlineRadioOptions" id="inlineRadio2" value="option2"&gt; 2&lt;/label&gt;&lt;label class="radio-inline"&gt; &lt;input type="radio" name="inlineRadioOptions" id="inlineRadio3" value="option3"&gt; 3&lt;/label&gt; 不带label文本的Checkbox 和 radio如果需要 &lt;label&gt; 内没有文字，输入框（input）正是你所期望的。 目前只适用于非内联的 checkbox 和 radio。 请记住，仍然需要为使用辅助技术的用户提供某种形式的 label（例如，使用 aria-label）。 12345678910&lt;div class="checkbox"&gt; &lt;label&gt; &lt;input type="checkbox" id="blankCheckbox" value="option1" aria-label="..."&gt; &lt;/label&gt;&lt;/div&gt;&lt;div class="radio"&gt; &lt;label&gt; &lt;input type="radio" name="blankRadio" id="blankRadio1" value="option1" aria-label="..."&gt; &lt;/label&gt;&lt;/div&gt; 下拉列表（select）注意，很多原生选择菜单 - 即在 Safari 和 Chrome 中 - 的圆角是无法通过修改 border-radius 属性来改变的。 1234567&lt;select class="form-control"&gt; &lt;option&gt;1&lt;/option&gt; &lt;option&gt;2&lt;/option&gt; &lt;option&gt;3&lt;/option&gt; &lt;option&gt;4&lt;/option&gt; &lt;option&gt;5&lt;/option&gt;&lt;/select&gt; 对于标记了 multiple 属性的 &lt;select&gt; 控件来说，默认显示多选项。 1234567&lt;select multiple class="form-control"&gt; &lt;option&gt;1&lt;/option&gt; &lt;option&gt;2&lt;/option&gt; &lt;option&gt;3&lt;/option&gt; &lt;option&gt;4&lt;/option&gt; &lt;option&gt;5&lt;/option&gt;&lt;/select&gt; 静态控件如果需要在表单中将一行纯文本和 label 元素放置于同一行，为 &lt;p&gt; 元素添加 .form-control-static 类即可。 1234567891011121314&lt;form class="form-horizontal"&gt; &lt;div class="form-group"&gt; &lt;label class="col-sm-2 control-label"&gt;Email&lt;/label&gt; &lt;div class="col-sm-10"&gt; &lt;p class="form-control-static"&gt;email@example.com&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label for="inputPassword" class="col-sm-2 control-label"&gt;Password&lt;/label&gt; &lt;div class="col-sm-10"&gt; &lt;input type="password" class="form-control" id="inputPassword" placeholder="Password"&gt; &lt;/div&gt; &lt;/div&gt;&lt;/form&gt; 1234567891011&lt;form class="form-inline"&gt; &lt;div class="form-group"&gt; &lt;label class="sr-only"&gt;Email&lt;/label&gt; &lt;p class="form-control-static"&gt;email@example.com&lt;/p&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label for="inputPassword2" class="sr-only"&gt;Password&lt;/label&gt; &lt;input type="password" class="form-control" id="inputPassword2" placeholder="Password"&gt; &lt;/div&gt; &lt;button type="submit" class="btn btn-default"&gt;Confirm identity&lt;/button&gt;&lt;/form&gt; 焦点状态我们将某些表单控件的默认 outline 样式移除，然后对 :focus 状态赋予 box-shadow 属性。 演示:focus 状态在本文档中，我们为上面实例中的输入框赋予了自定义的样式，用于演示 .form-control 元素的 :focus 状态。 禁用状态为输入框设置 disabled 属性可以禁止其与用户有任何交互（焦点、输入等）。被禁用的输入框颜色更浅，并且还添加了 not-allowed鼠标状态。 1&lt;input class="form-control" id="disabledInput" type="text" placeholder="Disabled input here..." disabled&gt; 被禁用的 fieldset为&lt;fieldset&gt; 设置 disabled 属性,可以禁用 &lt;fieldset&gt; 中包含的所有控件。 &lt;a&gt; 标签的链接功能不受影响默认情况下，浏览器会将 &lt;fieldset disabled&gt; 内所有的原生的表单控件（&lt;input&gt;、&lt;select&gt; 和 &lt;button&gt; 元素）设置为禁用状态，防止键盘和鼠标与他们交互。然而，如果表单中还包含 &lt;a ... class=&quot;btn btn-*&quot;&gt; 元素，这些元素将只被赋予 pointer-events: none 属性。正如在关于 禁用状态的按钮 章节中（尤其是关于锚点元素的子章节中）所描述的那样，该 CSS 属性尚不规范，并且在 Opera 18 及更低版本的浏览器或 Internet Explorer 11 总没有得到全面支持，并且不会阻止键盘用户能够获取焦点或激活这些链接。所以为了安全起见，建议使用自定义 JavaScript 来禁用这些链接。 跨浏览器兼容性虽然 Bootstrap 会将这些样式应用到所有浏览器上，Internet Explorer 11 及以下浏览器中的 &lt;fieldset&gt; 元素并不完全支持 disabled 属性。因此建议在这些浏览器上通过 JavaScript 代码来禁用 &lt;fieldset&gt;。 1234567891011121314151617181920&lt;form&gt; &lt;fieldset disabled&gt; &lt;div class="form-group"&gt; &lt;label for="disabledTextInput"&gt;Disabled input&lt;/label&gt; &lt;input type="text" id="disabledTextInput" class="form-control" placeholder="Disabled input"&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label for="disabledSelect"&gt;Disabled select menu&lt;/label&gt; &lt;select id="disabledSelect" class="form-control"&gt; &lt;option&gt;Disabled select&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class="checkbox"&gt; &lt;label&gt; &lt;input type="checkbox"&gt; Can't check this &lt;/label&gt; &lt;/div&gt; &lt;button type="submit" class="btn btn-primary"&gt;Submit&lt;/button&gt; &lt;/fieldset&gt;&lt;/form&gt; 只读状态为输入框设置 readonly 属性可以禁止用户修改输入框中的内容。处于只读状态的输入框颜色更浅（就像被禁用的输入框一样），但是仍然保留标准的鼠标状态。 1&lt;input class="form-control" type="text" placeholder="Readonly input here…" readonly&gt; Help textBlock level help text for form controls. Associating help text with form controlsHelp text should be explicitly associated with the form control it relates to using the aria-describedby attribute. This will ensure that assistive technologies – such as screen readers – will announce this help text when the user focuses or enters the control. 1234&lt;label class="sr-only" for="inputHelpBlock"&gt;Input with help text&lt;/label&gt;&lt;input type="text" id="inputHelpBlock" class="form-control" aria-describedby="helpBlock"&gt;...&lt;span id="helpBlock" class="help-block"&gt;A block of help text that breaks onto a new line and may extend beyond one line.&lt;/span&gt; 校验状态Bootstrap 对表单控件的校验状态，如 error、warning 和 success 状态，都定义了样式。使用时，添加 .has-warning、.has-error或 .has-success 类到这些控件的父元素即可。任何包含在此元素之内的 .control-label、.form-control 和 .help-block 元素都将接受这些校验状态的样式。 将验证状态传达给辅助设备和盲人用户使用这些校验样式只是为表单控件提供一个可视的、基于色彩的提示，但是并不能将这种提示信息传达给使用辅助设备的用户 - 例如屏幕阅读器 - 或者色盲用户。 为了确保所有用户都能获取正确信息，Bootstrap 还提供了另一种提示方式。例如，你可以在表单控件的 &lt;label&gt; 标签上以文本的形式显示提示信息（就像下面代码中所展示的）；包含一个 Glyphicon 字体图标 （还有赋予 .sr-only 类的文本信息 - 参考Glyphicon 字体图标实例）；或者提供一个额外的 辅助信息 块。另外，对于使用辅助设备的用户，无效的表单控件还可以赋予一个 aria-invalid=&quot;true&quot; 属性。 12345678910111213141516171819202122232425262728293031323334353637&lt;div class="form-group has-success"&gt; &lt;label class="control-label" for="inputSuccess1"&gt;Input with success&lt;/label&gt; &lt;input type="text" class="form-control" id="inputSuccess1" aria-describedby="helpBlock2"&gt; &lt;span id="helpBlock2" class="help-block"&gt;A block of help text that breaks onto a new line and may extend beyond one line.&lt;/span&gt;&lt;/div&gt;&lt;div class="form-group has-warning"&gt; &lt;label class="control-label" for="inputWarning1"&gt;Input with warning&lt;/label&gt; &lt;input type="text" class="form-control" id="inputWarning1"&gt;&lt;/div&gt;&lt;div class="form-group has-error"&gt; &lt;label class="control-label" for="inputError1"&gt;Input with error&lt;/label&gt; &lt;input type="text" class="form-control" id="inputError1"&gt;&lt;/div&gt;&lt;div class="has-success"&gt; &lt;div class="checkbox"&gt; &lt;label&gt; &lt;input type="checkbox" id="checkboxSuccess" value="option1"&gt; Checkbox with success &lt;/label&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="has-warning"&gt; &lt;div class="checkbox"&gt; &lt;label&gt; &lt;input type="checkbox" id="checkboxWarning" value="option1"&gt; Checkbox with warning &lt;/label&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="has-error"&gt; &lt;div class="checkbox"&gt; &lt;label&gt; &lt;input type="checkbox" id="checkboxError" value="option1"&gt; Checkbox with error &lt;/label&gt; &lt;/div&gt;&lt;/div&gt; 添加额外的图标你还可以针对校验状态为输入框添加额外的图标。只需设置相应的 .has-feedback 类并添加正确的图标即可。 反馈图标（feedback icon）只能使用在文本输入框 元素上。 图标、label 和输入控件组对于不带有 label 标签的输入框以及右侧带有附加组件的输入框组，需要手动为其图标定位。为了让所有用户都能访问你的网站，我们强烈建议为所有输入框添加 label 标签。如果你不希望将 label 标签展示出来，可以通过添加 .sr-only 类来实现。如果的确不能添加 label 标签，请调整图标的 top 值。对于输入框组，请根据你的实际情况调整 right 值。 123456789101112131415161718192021222324252627&lt;div class="form-group has-success has-feedback"&gt; &lt;label class="control-label" for="inputSuccess2"&gt;Input with success&lt;/label&gt; &lt;input type="text" class="form-control" id="inputSuccess2" aria-describedby="inputSuccess2Status"&gt; &lt;span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true"&gt;&lt;/span&gt; &lt;span id="inputSuccess2Status" class="sr-only"&gt;(success)&lt;/span&gt;&lt;/div&gt;&lt;div class="form-group has-warning has-feedback"&gt; &lt;label class="control-label" for="inputWarning2"&gt;Input with warning&lt;/label&gt; &lt;input type="text" class="form-control" id="inputWarning2" aria-describedby="inputWarning2Status"&gt; &lt;span class="glyphicon glyphicon-warning-sign form-control-feedback" aria-hidden="true"&gt;&lt;/span&gt; &lt;span id="inputWarning2Status" class="sr-only"&gt;(warning)&lt;/span&gt;&lt;/div&gt;&lt;div class="form-group has-error has-feedback"&gt; &lt;label class="control-label" for="inputError2"&gt;Input with error&lt;/label&gt; &lt;input type="text" class="form-control" id="inputError2" aria-describedby="inputError2Status"&gt; &lt;span class="glyphicon glyphicon-remove form-control-feedback" aria-hidden="true"&gt;&lt;/span&gt; &lt;span id="inputError2Status" class="sr-only"&gt;(error)&lt;/span&gt;&lt;/div&gt;&lt;div class="form-group has-success has-feedback"&gt; &lt;label class="control-label" for="inputGroupSuccess1"&gt;Input group with success&lt;/label&gt; &lt;div class="input-group"&gt; &lt;span class="input-group-addon"&gt;@&lt;/span&gt; &lt;input type="text" class="form-control" id="inputGroupSuccess1" aria-describedby="inputGroupSuccess1Status"&gt; &lt;/div&gt; &lt;span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true"&gt;&lt;/span&gt; &lt;span id="inputGroupSuccess1Status" class="sr-only"&gt;(success)&lt;/span&gt;&lt;/div&gt; 为水平排列的表单和内联表单设置可选的图标123456789101112131415161718192021&lt;form class="form-horizontal"&gt; &lt;div class="form-group has-success has-feedback"&gt; &lt;label class="control-label col-sm-3" for="inputSuccess3"&gt;Input with success&lt;/label&gt; &lt;div class="col-sm-9"&gt; &lt;input type="text" class="form-control" id="inputSuccess3" aria-describedby="inputSuccess3Status"&gt; &lt;span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true"&gt;&lt;/span&gt; &lt;span id="inputSuccess3Status" class="sr-only"&gt;(success)&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group has-success has-feedback"&gt; &lt;label class="control-label col-sm-3" for="inputGroupSuccess2"&gt;Input group with success&lt;/label&gt; &lt;div class="col-sm-9"&gt; &lt;div class="input-group"&gt; &lt;span class="input-group-addon"&gt;@&lt;/span&gt; &lt;input type="text" class="form-control" id="inputGroupSuccess2" aria-describedby="inputGroupSuccess2Status"&gt; &lt;/div&gt; &lt;span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true"&gt;&lt;/span&gt; &lt;span id="inputGroupSuccess2Status" class="sr-only"&gt;(success)&lt;/span&gt; &lt;/div&gt; &lt;/div&gt;&lt;/form&gt; 12345678910111213141516171819&lt;form class="form-inline"&gt; &lt;div class="form-group has-success has-feedback"&gt; &lt;label class="control-label" for="inputSuccess4"&gt;Input with success&lt;/label&gt; &lt;input type="text" class="form-control" id="inputSuccess4" aria-describedby="inputSuccess4Status"&gt; &lt;span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true"&gt;&lt;/span&gt; &lt;span id="inputSuccess4Status" class="sr-only"&gt;(success)&lt;/span&gt; &lt;/div&gt;&lt;/form&gt;&lt;form class="form-inline"&gt; &lt;div class="form-group has-success has-feedback"&gt; &lt;label class="control-label" for="inputGroupSuccess3"&gt;Input group with success&lt;/label&gt; &lt;div class="input-group"&gt; &lt;span class="input-group-addon"&gt;@&lt;/span&gt; &lt;input type="text" class="form-control" id="inputGroupSuccess3" aria-describedby="inputGroupSuccess3Status"&gt; &lt;/div&gt; &lt;span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true"&gt;&lt;/span&gt; &lt;span id="inputGroupSuccess3Status" class="sr-only"&gt;(success)&lt;/span&gt; &lt;/div&gt;&lt;/form&gt; 可选的图标与设置 .sr-only 类的 label如果你使用 .sr-only 类来隐藏表单控件的 &lt;label&gt; （而不是使用其它标签选项，如 aria-label 属性）， 一旦它被添加，Bootstrap 会自动调整图标的位置。 123456789101112131415&lt;div class="form-group has-success has-feedback"&gt; &lt;label class="control-label sr-only" for="inputSuccess5"&gt;Hidden label&lt;/label&gt; &lt;input type="text" class="form-control" id="inputSuccess5" aria-describedby="inputSuccess5Status"&gt; &lt;span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true"&gt;&lt;/span&gt; &lt;span id="inputSuccess5Status" class="sr-only"&gt;(success)&lt;/span&gt;&lt;/div&gt;&lt;div class="form-group has-success has-feedback"&gt; &lt;label class="control-label sr-only" for="inputGroupSuccess4"&gt;Input group with success&lt;/label&gt; &lt;div class="input-group"&gt; &lt;span class="input-group-addon"&gt;@&lt;/span&gt; &lt;input type="text" class="form-control" id="inputGroupSuccess4" aria-describedby="inputGroupSuccess4Status"&gt; &lt;/div&gt; &lt;span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true"&gt;&lt;/span&gt; &lt;span id="inputGroupSuccess4Status" class="sr-only"&gt;(success)&lt;/span&gt;&lt;/div&gt; 控件尺寸通过 .input-lg 类似的类可以为控件设置高度，通过 .col-lg-* 类似的类可以为控件设置宽度。 高度尺寸创建大一些或小一些的表单控件以匹配按钮尺寸。 1234567&lt;input class="form-control input-lg" type="text" placeholder=".input-lg"&gt;&lt;input class="form-control" type="text" placeholder="Default input"&gt;&lt;input class="form-control input-sm" type="text" placeholder=".input-sm"&gt;&lt;select class="form-control input-lg"&gt;...&lt;/select&gt;&lt;select class="form-control"&gt;...&lt;/select&gt;&lt;select class="form-control input-sm"&gt;...&lt;/select&gt; 水平排列的表单组的尺寸通过添加 .form-group-lg 或 .form-group-sm 类，为 .form-horizontal 包裹的 label 元素和表单控件快速设置尺寸。 1234567891011121314&lt;form class="form-horizontal"&gt; &lt;div class="form-group form-group-lg"&gt; &lt;label class="col-sm-2 control-label" for="formGroupInputLarge"&gt;Large label&lt;/label&gt; &lt;div class="col-sm-10"&gt; &lt;input class="form-control" type="text" id="formGroupInputLarge" placeholder="Large input"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group form-group-sm"&gt; &lt;label class="col-sm-2 control-label" for="formGroupInputSmall"&gt;Small label&lt;/label&gt; &lt;div class="col-sm-10"&gt; &lt;input class="form-control" type="text" id="formGroupInputSmall" placeholder="Small input"&gt; &lt;/div&gt; &lt;/div&gt;&lt;/form&gt; 调整列（column）尺寸用栅格系统中的列（column）包裹输入框或其任何父元素，都可很容易的为其设置宽度。 1234567891011&lt;div class="row"&gt; &lt;div class="col-xs-2"&gt; &lt;input type="text" class="form-control" placeholder=".col-xs-2"&gt; &lt;/div&gt; &lt;div class="col-xs-3"&gt; &lt;input type="text" class="form-control" placeholder=".col-xs-3"&gt; &lt;/div&gt; &lt;div class="col-xs-4"&gt; &lt;input type="text" class="form-control" placeholder=".col-xs-4"&gt; &lt;/div&gt;&lt;/div&gt; 按钮可作为按钮使用的标签或元素为 &lt;a&gt;、&lt;button&gt; 或 &lt;input&gt; 元素添加按钮类（button class）即可使用 Bootstrap 提供的样式。 1234&lt;a class="btn btn-default" href="#" role="button"&gt;Link&lt;/a&gt;&lt;button class="btn btn-default" type="submit"&gt;Button&lt;/button&gt;&lt;input class="btn btn-default" type="button" value="Input"&gt;&lt;input class="btn btn-default" type="submit" value="Submit"&gt; 针对组件的注意事项虽然按钮类可以应用到 &lt;a&gt; 和 &lt;button&gt; 元素上，但是，导航和导航条组件只支持 &lt;button&gt; 元素。 链接被作为按钮使用时的注意事项如果 &lt;a&gt; 元素被作为按钮使用 – 并用于在当前页面触发某些功能 – 而不是用于链接其他页面或链接当前页面中的其他部分，那么，务必为其设置 role=&quot;button&quot; 属性。 跨浏览器展现我们总结的最佳实践是：强烈建议尽可能使用 元素来获得在各个浏览器上获得相匹配的绘制效果。 预定义样式使用下面列出的类可以快速创建一个带有预定义样式的按钮。 1234567891011121314151617181920&lt;!-- Standard button --&gt;&lt;button type="button" class="btn btn-default"&gt;（默认样式）Default&lt;/button&gt;&lt;!-- Provides extra visual weight and identifies the primary action in a set of buttons --&gt;&lt;button type="button" class="btn btn-primary"&gt;（首选项）Primary&lt;/button&gt;&lt;!-- Indicates a successful or positive action --&gt;&lt;button type="button" class="btn btn-success"&gt;（成功）Success&lt;/button&gt;&lt;!-- Contextual button for informational alert messages --&gt;&lt;button type="button" class="btn btn-info"&gt;（一般信息）Info&lt;/button&gt;&lt;!-- Indicates caution should be taken with this action --&gt;&lt;button type="button" class="btn btn-warning"&gt;（警告）Warning&lt;/button&gt;&lt;!-- Indicates a dangerous or potentially negative action --&gt;&lt;button type="button" class="btn btn-danger"&gt;（危险）Danger&lt;/button&gt;&lt;!-- Deemphasize a button by making it look like a link while maintaining button behavior --&gt;&lt;button type="button" class="btn btn-link"&gt;（链接）Link&lt;/button&gt; 尺寸使用 .btn-lg、.btn-sm 或 .btn-xs 就可以获得不同尺寸的按钮。 12345678910111213141516&lt;p&gt; &lt;button type="button" class="btn btn-primary btn-lg"&gt;（大按钮）Large button&lt;/button&gt; &lt;button type="button" class="btn btn-default btn-lg"&gt;（大按钮）Large button&lt;/button&gt;&lt;/p&gt;&lt;p&gt; &lt;button type="button" class="btn btn-primary"&gt;（默认尺寸）Default button&lt;/button&gt; &lt;button type="button" class="btn btn-default"&gt;（默认尺寸）Default button&lt;/button&gt;&lt;/p&gt;&lt;p&gt; &lt;button type="button" class="btn btn-primary btn-sm"&gt;（小按钮）Small button&lt;/button&gt; &lt;button type="button" class="btn btn-default btn-sm"&gt;（小按钮）Small button&lt;/button&gt;&lt;/p&gt;&lt;p&gt; &lt;button type="button" class="btn btn-primary btn-xs"&gt;（超小尺寸）Extra small button&lt;/button&gt; &lt;button type="button" class="btn btn-default btn-xs"&gt;（超小尺寸）Extra small button&lt;/button&gt;&lt;/p&gt; 通过给按钮添加 .btn-block 类可以将其拉伸至父元素100%的宽度，而且按钮也变为了块级（block）元素。 （块级元素）Block level button（块级元素）Block level button 12&lt;button type="button" class="btn btn-primary btn-lg btn-block"&gt;（块级元素）Block level button&lt;/button&gt;&lt;button type="button" class="btn btn-default btn-lg btn-block"&gt;（块级元素）Block level button&lt;/button&gt; 激活状态当按钮处于激活状态时，其表现为被按压下去（底色更深、边框夜色更深、向内投射阴影）。对于 &lt;button&gt; 元素，是通过 :active 状态实现的。对于 &lt;a&gt; 元素，是通过 .active 类实现的。然而，你还可以将 .active 应用到 &lt;button&gt; 上（包含 aria-pressed=&quot;true&quot;属性)），并通过编程的方式使其处于激活状态。 button 元素由于 :active 是伪状态，因此无需额外添加，但是在需要让其表现出同样外观的时候可以添加 .active 类。 12&lt;button type="button" class="btn btn-primary btn-lg active"&gt;Primary button&lt;/button&gt;&lt;button type="button" class="btn btn-default btn-lg active"&gt;Button&lt;/button&gt; 链接（&lt;a&gt;）元素可以为基于 &lt;a&gt; 元素创建的按钮添加 .active 类。 12&lt;a href="#" class="btn btn-primary btn-lg active" role="button"&gt;Primary link&lt;/a&gt;&lt;a href="#" class="btn btn-default btn-lg active" role="button"&gt;Link&lt;/a&gt; 禁用状态通过为按钮的背景设置 opacity 属性就可以呈现出无法点击的效果。 button 元素为 &lt;button&gt; 元素添加 disabled 属性，使其表现出禁用状态。 12&lt;button type="button" class="btn btn-lg btn-primary" disabled="disabled"&gt;Primary button&lt;/button&gt;&lt;button type="button" class="btn btn-default btn-lg" disabled="disabled"&gt;Button&lt;/button&gt; 跨浏览器兼容性如果为 &lt;button&gt; 元素添加 disabled 属性，Internet Explorer 9 及更低版本的浏览器将会把按钮中的文本绘制为灰色，并带有恶心的阴影 链接（&lt;a&gt;）元素为基于 &lt;a&gt; 元素创建的按钮添加 .disabled 类。 12&lt;a href="#" class="btn btn-primary btn-lg disabled" role="button"&gt;Primary link&lt;/a&gt;&lt;a href="#" class="btn btn-default btn-lg disabled" role="button"&gt;Link&lt;/a&gt; 我们把 .disabled 作为工具类使用，就像 .active 类一样，因此不需要增加前缀。 链接的原始功能不受影响上面提到的类只是通过设置 pointer-events: none 来禁止 &lt;a&gt; 元素作为链接的原始功能，但是，这一 CSS 属性并没有被标准化，并且 Opera 18 及更低版本的浏览器并没有完全支持这一属性，同样，Internet Explorer 11 也不支持。In addition, even in browsers that do support pointer-events: none, keyboard navigation remains unaffected, meaning that sighted keyboard users and users of assistive technologies will still be able to activate these links. 因此，为了安全起见，建议通过 JavaScript 代码来禁止链接的原始功能。 图片响应式图片在 Bootstrap 版本 3 中，通过为图片添加 .img-responsive 类可以让图片支持响应式布局。其实质是为图片设置了 max-width: 100%;、 height: auto; 和 display: block; 属性，从而让图片在其父元素中更好的缩放。 如果需要让使用了 .img-responsive 类的图片水平居中，请使用 .center-block 类，不要用 .text-center。 请参考助手类章节 了解更多关于 .center-block 的用法。 图片形状通过为 &lt;img&gt; 元素添加以下相应的类，可以让图片呈现不同的形状。 跨浏览器兼容性 时刻牢记：Internet Explorer 8 不支持 CSS3 中的圆角属性。 123&lt;img src="..." alt="..." class="img-rounded"&gt;&lt;img src="..." alt="..." class="img-circle"&gt;&lt;img src="..." alt="..." class="img-thumbnail"&gt; 辅助类情境文本颜色通过颜色来展示意图，Bootstrap 提供了一组工具类。这些类可以应用于链接，并且在鼠标经过时颜色可以还可以加深，就像默认的链接一样。 123456&lt;p class="text-muted"&gt;...&lt;/p&gt;&lt;p class="text-primary"&gt;...&lt;/p&gt;&lt;p class="text-success"&gt;...&lt;/p&gt;&lt;p class="text-info"&gt;...&lt;/p&gt;&lt;p class="text-warning"&gt;...&lt;/p&gt;&lt;p class="text-danger"&gt;...&lt;/p&gt; 情境背景色和情境文本颜色类一样，使用任意情境背景色类就可以设置元素的背景。链接组件在鼠标经过时颜色会加深，就像上面所讲的情境文本颜色类一样。 12345&lt;p class="bg-primary"&gt;...&lt;/p&gt;&lt;p class="bg-success"&gt;...&lt;/p&gt;&lt;p class="bg-info"&gt;...&lt;/p&gt;&lt;p class="bg-warning"&gt;...&lt;/p&gt;&lt;p class="bg-danger"&gt;...&lt;/p&gt; 关闭按钮通过使用一个象征关闭的图标，可以让模态框和警告框消失。 1&lt;button type="button" class="close" aria-label="Close"&gt;&lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;&lt;/button&gt; 三角符号通过使用三角符号可以指示某个元素具有下拉菜单的功能。注意，向上弹出式菜单中的三角符号是反方向的。 1&lt;span class="caret"&gt;&lt;/span&gt; 快速浮动通过添加一个类，可以将任意元素向左或向右浮动。!important 被用来明确 CSS 样式的优先级。这些类还可以作为 mixin（参见 less 文档） 使用。 123456789101112131415161718&lt;div class="pull-left"&gt;...&lt;/div&gt;&lt;div class="pull-right"&gt;...&lt;/div&gt;// Classes.pull-left &#123; float: left !important;&#125;.pull-right &#123; float: right !important;&#125;// Usage as mixins.element &#123; .pull-left();&#125;.another-element &#123; .pull-right();&#125; 不能用于导航条组件中排列导航条中的组件时可以使用这些工具类：.navbar-left 或 .navbar-right 。 参见导航条文档以获取更多信息。 让内容块居中为任意元素设置 display: block 属性并通过 margin 属性让其中的内容居中。下面列出的类还可以作为 mixin 使用。 123456789101112&lt;div class="center-block"&gt;...&lt;/div&gt;// Class.center-block &#123; display: block; margin-left: auto; margin-right: auto;&#125;// Usage as a mixin.element &#123; .center-block();&#125; 清除浮动通过为父元素添加 .clearfix 类可以很容易地清除浮动（float）。这里所使用的是 Nicolas Gallagher 创造的 micro clearfix 方式。此类还可以作为 mixin 使用。 123456789101112131415161718&lt;!-- Usage as a class --&gt;&lt;div class="clearfix"&gt;...&lt;/div&gt;// Mixin itself.clearfix() &#123; &amp;:before, &amp;:after &#123; content: " "; display: table; &#125; &amp;:after &#123; clear: both; &#125;&#125;// Usage as a mixin.element &#123; .clearfix();&#125; 显示或隐藏内容.show 和 .hidden 类可以强制任意元素显示或隐藏(对于屏幕阅读器也能起效)。这些类通过 !important 来避免 CSS 样式优先级问题，就像 quick floats 一样的做法。注意，这些类只对块级元素起作用，另外，还可以作为 mixin 使用。 .hide 类仍然可用，但是它不能对屏幕阅读器起作用，并且从 v3.0.1 版本开始就不建议使用了。请使用 .hidden 或 .sr-only 。 另外，.invisible 类可以被用来仅仅影响元素的可见性，也就是说，元素的 display 属性不被改变，并且这个元素仍然能够影响文档流的排布。 1234567891011121314151617181920&lt;div class="show"&gt;...&lt;/div&gt;&lt;div class="hidden"&gt;...&lt;/div&gt;// Classes.show &#123; display: block !important;&#125;.hidden &#123; display: none !important;&#125;.invisible &#123; visibility: hidden;&#125;// Usage as mixins.element &#123; .show();&#125;.another-element &#123; .hidden();&#125; 图片替换使用 .text-hide 类或对应的 mixin 可以用来将元素的文本内容替换为一张背景图。 12345&lt;h1 class="text-hide"&gt;Custom heading&lt;/h1&gt;// Usage as a mixin.heading &#123; .text-hide();&#125; 响应式工具为了加快对移动设备友好的页面开发工作，利用媒体查询功能并使用这些工具类可以方便的针对不同设备展示或隐藏页面内容。另外还包含了针对打印机显示或隐藏内容的工具类。 有针对性的使用这类工具类，从而避免为同一个网站创建完全不同的版本。相反，通过使用这些工具类可以在不同设备上提供不同的展现形式。 可用的类通过单独或联合使用以下列出的类，可以针对不同屏幕尺寸隐藏或显示页面内容。 超小屏幕手机 (&lt;768px) 小屏幕平板 (≥768px) 中等屏幕桌面 (≥992px) 大屏幕桌面 (≥1200px) .visible-xs-* 可见 隐藏 隐藏 隐藏 .visible-sm-* 隐藏 可见 隐藏 隐藏 .visible-md-* 隐藏 隐藏 可见 隐藏 .visible-lg-* 隐藏 隐藏 隐藏 可见 .hidden-xs 隐藏 可见 可见 可见 .hidden-sm 可见 隐藏 可见 可见 .hidden-md 可见 可见 隐藏 可见 .hidden-lg 可见 可见 可见 隐藏 从 v3.2.0 版本起，形如 .visible-*-* 的类针对每种屏幕大小都有了三种变体，每个针对 CSS 中不同的 display 属性，列表如下： 类组 CSS display .visible-*-block display: block; .visible-*-inline display: inline; .visible-*-inline-block display: inline-block; 因此，以超小屏幕（xs）为例，可用的 .visible-*-* 类是：.visible-xs-block、.visible-xs-inline 和 .visible-xs-inline-block。 .visible-xs、.visible-sm、.visible-md 和 .visible-lg 类也同时存在。但是从 v3.2.0 版本开始不再建议使用。除了 &lt;table&gt; 相关的元素的特殊情况外，它们与 .visible-*-block 大体相同。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>bootstrap</tag>
        <tag>框架</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js基础]]></title>
    <url>%2Fundefined%2Fjs%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[js-常用互动方法confirm 确认框 123456789var hh = function()&#123; var message = confirm("yes or no"); if(message==true)&#123; document.write("yes"); &#125;else&#123; document.write("no"); &#125;&#125;hh(); prompt消息对话框123456789var hh = function()&#123; var name = prompt("请输入你的名字","jiaqi");//第二个参数是输入框中的默认值，可以不写 if(name!=null)&#123; document.write("你好"+name); &#125;else&#123; document.write("请输入名字"); &#125;&#125;hh(); 打开新窗口（window.open）123456789101112window.open([url],[窗口名称],[参数字符串]);/*URL：可选参数，在窗口中要显示网页的网址或路径。如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。窗口名称：可选参数，被打开窗口的名称。 1.该名称由字母、数字和下划线字符组成。 2."_top"、"_blank"、"_self"具有特殊意义的名称。 _blank：在新窗口显示目标网页 _self：在当前窗口显示目标网页 _top：框架网页中在上部窗口中显示目标网页 3.相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。 4.name 不能包含有空格。参数字符串：可选参数，设置窗口参数，各参数用逗号隔开。*/ 参数表 参数 值 说明 top Number 窗口顶部离开屏幕顶部的像素数 left Number 窗口左端离开屏幕的像素数 width Number 窗口的宽度 height Number 窗口的高度 menubar yes,no 窗口有没有菜单 toolbar yes,no 窗口有没有工具条 scrollbar yes,no 窗口有没有滚动条 status yes,no 窗口有没有状态栏 关闭新窗口（window.close）用法 12345window.close(); //关闭本窗口&lt;窗口对象&gt;.close(); //关闭指定的窗口//例var myWin = window.open("http://www.baidu.com");myWin.close(); 综合练习 任务1、新窗口打开时弹出确认框，是否打开 12&gt; 提示: 使用 if 判断确认框是否点击了确定，如点击弹出输入对话框，否则没有任何操作。&gt; 2、通过输入对话框，确定打开的网址，默认为 http：//www.imooc.com/ 3、打开的窗口要求，宽400像素，高500像素，无菜单栏、无工具栏。 12345678function openWindow() &#123; if (confirm("确认打开新窗口？")) &#123; var url = prompt("请输入要打开的网址", "http://www.imooc.com"); if (url != null) &#123; window.open(url,"_blank","width=400,height=500,menubar=no,toolbar=no"); &#125; else &#123; url = prompt("请重新输入网址"); &#125; &#125;&#125; html部分 1&lt;button onclick="openWindow()"&gt;打开新窗口&lt;/button&gt; js-DOM操作什么是DOM 文档对象模型DOM（Document Object Model）定义访问和处理HTML文档的标准方法。DOM 将HTML文档呈现为带有元素、属性和文本的树结构（节点树）。 HTML文档可以说是由节点构成的集合，三种常见的DOM节点 元素节点：、、等L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","model":{"jsonPath":"live2d-widget-model-wanko"},"display":{"position":"right","width":150,"height":300},"mobile":{"show":true},"log":false,"tagMode":false}); 文本节点：向用户展示的内容，如…中的JavaScript、DOM、CSS等文本。 属性节点：元素属性，如标签的链接属性href=”http://www.baidu.com&quot; 通过id获取元素1document.getElementById("id"); innerHTML属性1Object.innerHTML; 注：Object是获取的元素对象，如通过document.getElementById(“id”)获取的元素。 改变HTML样式1Object.style.property = new style; 常用属性表（property）: 属性 描述 backgroundColor 背景颜色 height 高度 width 宽度 color 文本颜色 font 在一行设置所有字体属性 display 显示或隐藏（block/none） fontSize 字体大小 案例 在下方代码块中，第12行补充代码，修改h2标签的样式，将颜色设为红色。 在下方代码块中，第13行补充代码，修改h2标签的样式，将背景颜色设为灰色(#CCC)。 在下方代码块中，第14行补充代码，修改h2标签的样式，将宽设为300px。 1234567891011121314151617&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;&lt;title&gt;style样式&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h2 id="con"&gt;I love JavaScript&lt;/H2&gt; &lt;p&gt; JavaScript使网页显示动态效果并实现与用户交互功能。&lt;/p&gt; &lt;script type="text/javascript"&gt; var mychar= document.getElementById("con"); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 答案： 123con.style.color = "red"; con.style.backgroundColor = "#ccc"; con.style.width = "300px"; js改变class1Object.className = "new className"; //js中的className属性对应HTML中的class属性 综合实践-根据提示补全代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" Content="text/html; charset=utf-8" /&gt;&lt;title&gt;javascript&lt;/title&gt;&lt;style type="text/css"&gt;body&#123;font-size:12px;&#125;#txt&#123; height:400px; width:600px; border:#333 solid 1px; padding:5px;&#125;p&#123; line-height:18px; text-indent:2em;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h2 id="con"&gt;JavaScript课程&lt;/H2&gt; &lt;div id="txt"&gt; &lt;h5&gt;JavaScript为网页添加动态效果并实现与用户交互的功能。&lt;/h5&gt; &lt;p&gt;1. JavaScript入门篇，让不懂JS的你，快速了解JS。&lt;/p&gt; &lt;p&gt;2. JavaScript进阶篇，让你掌握JS的基础语法、函数、数组、事件、内置对象、BOM浏览器、DOM操作。&lt;/p&gt; &lt;p&gt;3. 学完以上两门基础课后，在深入学习JavaScript的变量作用域、事件、对象、运动、cookie、正则表达式、ajax等课程。&lt;/p&gt; &lt;/div&gt; &lt;form&gt; &lt;!--当点击相应按钮，执行相应操作，为按钮添加相应事件--&gt; &lt;input type="button" value="改变颜色" &gt; &lt;input type="button" value="改变宽高" &gt; &lt;input type="button" value="隐藏内容" &gt; &lt;input type="button" value="显示内容" &gt; &lt;input type="button" value="取消设置" &gt; &lt;/form&gt; &lt;script type="text/javascript"&gt;//定义"改变颜色"的函数//定义"改变宽高"的函数//定义"隐藏内容"的函数//定义"显示内容"的函数//定义"取消设置"的函数 &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 参考 123456789101112131415161718192021222324252627282930var btns = document.getElementsByTagName("input");var txt = document.getElementById("txt");//定义"改变颜色"的函数btns[0].onclick = function()&#123; txt.style.color = "#fff"; txt.style.backgroundColor = "red";&#125;//定义"改变宽高"的函数btns[1].onclick = function()&#123; txt.style.width = "800px"; txt.style.height = "300px";&#125;//定义"隐藏内容"的函数btns[2].onclick = function()&#123; txt.style.display = "none";&#125;//定义"显示内容"的函数btns[3].onclick = function()&#123; txt.style.display = "block";&#125;//定义"取消设置"的函数btns[4].onclick = function()&#123; if(confirm("是否取消设置"))&#123; txt.removeAttribute("style"); &#125;&#125;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[node学习笔记-day1]]></title>
    <url>%2Fundefined%2Fnode%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day1%2F</url>
    <content type="text"><![CDATA[Node.js简介Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。 node适合用来做什么Node.js 可以解析JS代码（没有浏览器安全级别的限制）提供很多系统级别的API，如： 文件的读写 进程的管理 网络通信 …… 启用服务器1234567891011//引包let http = require("http");//创建服务器，参数是一个回调函数，表示如果有请求进来，要做什么let server = http.createServer(function (req, res) &#123; //req表示请求,request;res表示响应,response //设置Http头部，状态码是200，文件类型是html，字符集是utf8 res.writeHead(200, &#123;"Content-type": "text/html;charset=UTF-8"&#125;); res.end("hello,node");&#125;);//运行服务器，监听3000端口（端口号可以任意更改）server.listen(80); 注意事项： 如果想修改程序，必须中断当前运行的服务器，重新node一次，刷新，才行。 Node.js是服务器的程序，写的js语句，都将运行在服务器上。返回给客户的，都是已经处理好的纯html。 ctrl+c，就可以打断挂起的服务器程序。此时按上箭头，能够快速调用最近的node命令 cls可以清屏 我们本地写一个js，不能直接拖入浏览器运行，但是有了node，我们任何一个js文件，都可以通过node来运行。也就是说，node就是一个js的执行环境。 我们现在，要跑起来一个服务器，要以.js存储、用node命令运行这个js文件。 node没有文件夹的概念12345678910111213141516171819// require表示引包，意思是引用自己的一个功能var http = require("http");var fs = require("fs");// 创建服务器，参数是一个回调函数，表示如果有请求进来，要做什么var server = http.createServer(function(req,res)&#123; if(req.url == "/fang")&#123; fs.readFile("./test/xixi.html",function (err,data) &#123; //req表示请求，request;res表示响应,response //设置HTTP头部，状态码是200，文件类型是html，字符集是utf-8 res.writeHead(200,&#123;"Content-type":"text/html;charset=UTF-8"&#125;); res.end(data); &#125;); &#125;else&#123; res.writeHead(404,&#123;"Content-type":"text/html;charset=UTF-8"&#125;); res.end("xixi,没有这个页面呦"); &#125;&#125;);// 运行服务器，监听3030端口（端口号可以自己随便改）server.listen(3030,"127.0.0.1"); 以上代码，运行后浏览器里的结果会是啥？ “xixi,没有这个页面呦” 原因就是在node中没有文件夹的概念 HTTP模块Node.js中，将很多的功能，划分为了一个个node_modules，大陆的书翻译为模块；台湾的书，翻译为模组。这是因为，有一些程序需要使用fs功能（文件读取功能），有一些不用的，所以为了效率，你用什么，你就require什么。官网api:http://nodejs.org/api/ 示例123456789101112// 引用模块var http = require("http");// 创建一个服务器，回调函数表示接收到请求之后做的事情var server = http.createServer(function(req,res)&#123; //req参数表示请求，res表示响应 console.log("服务器接收到了请求"+req.url); //设置头部 res.writeHead(200,&#123;"Content-Type":"text/html;charset=UTF8"&#125;); res.end();&#125;);//监听端口server.listen(2020,"localhost"); 注意： response.end();必写，否则会认为请求没有结束 response.writeHead(200,{“Content-Type”:”text/html;charset=UTF8”});设置一个响应头 编码为utf-8 response.write(“”);内容必须为字符串 URL模块 req.url属性，表示用户的请求URL地址。所有的路由设计，都是通过req.url来实现的。 识别URL，用到两个新模块，第一个就是url模块，第二个就是querystring模块 字符串查询，用querystring处理 1234567querystring.parse('foo=bar&amp;baz=qux&amp;baz=quux&amp;corge')// returns &#123; foo: 'bar', baz: ['qux', 'quux'], corge: '' &#125; fs模块1234567891011121314151617//1. 导入文件系统fs依赖 var fs = require('fs');//2. 读取 // 同步读取 var data = fs.readFileSync('data.txt'); // 打印出来,原生是buffer数据,需要转码 console.log(data.toString()); console.log('结束');// 3.node.js的回调函数// node.js的异步编程的直接体现就是回调函数.// 异步读取var time = new Date();fs.readFile('data.txt', function (err,data) &#123; console.log(data.toString()); console.log('读取本地文件耗时:' + (new Date() - time)+'毫秒');&#125;);console.log('完毕'); 123456readFile();// 读取文件//-&gt;fs.readFile(path,[option],callback)//-&gt;callback函数有两个参数function(err,data)&#123;&#125;//1).err是读取文件失败后出发的错误对象//2).data是从文件中读取的数据. 12345678910111213.writeFile()// 写入文件-&gt;fs.writeFile(path,data,[option],callback)var str = '此情此景,我想吟诗一首!'fs.writeFile('data1.txt', str, function (err) &#123;if (err) &#123; throw err; &#125;console.log('写入成功!');&#125;);//默认的第三个参数是&#123;flag='w'&#125;,是写的操作.会清空掉文件.如果想要追加内容,可以设置&#123;flag='a'&#125;fs.writeFile('data1.txt', str,&#123;flag:'a'&#125;, function (err) &#123;if (err) &#123;throw err;&#125;console.log('写入成功!');&#125;);//&#123;flag:'w'&#125;为默认值,w代表写文件,a代表追加内容 // 今天先到这吧 眼睛痛]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fundefined%2Fhello-world%2F</url>
    <content type="text"><![CDATA[最近几周开始接触了git和GitHub,偶然看到可以用GitHub提供的pages服务基于Hexo免费搭建个人博客，周末闲来无事就看着Hexo的官方文档自己搭了一个。虽然步骤不多，也不麻烦，但是还是碰到了许多问题，还好有万能的度娘，每当我迷失方向时总会指引我走出迷途。 ​ 下面先写一下通过Hexo创建文章时的几条常用命令，以后闲了的话会把我搭建博客配置各种东西的步骤完整的总结出来。 基本操作执行下列命令来创建一篇新文章。1$ hexo new "My New Post" More info: 写作 开启本地服务器1$ hexo server More info: Server 生成文件1$ hexo generate More info: Generating 部署1$ hexo deploy More info: Deployment 监视文件变动Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。 1$ hexo generate --watch 完成后部署可以执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。 12$ hexo generate --deploy$ hexo deploy --generate 简写123# 上面两个命令可以简写为$ hexo g -d$ hexo d -g]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
</search>
