<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[js基础]]></title>
    <url>%2F%5Bobject%20Object%5D%2Fjs%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[js-常用互动方法confirm 确认框 123456789var hh = function()&#123; var message = confirm("yes or no"); if(message==true)&#123; document.write("yes"); &#125;else&#123; document.write("no"); &#125;&#125;hh(); prompt消息对话框123456789var hh = function()&#123; var name = prompt("请输入你的名字","jiaqi");//第二个参数是输入框中的默认值，可以不写 if(name!=null)&#123; document.write("你好"+name); &#125;else&#123; document.write("请输入名字"); &#125;&#125;hh(); 打开新窗口（window.open）123456789101112window.open([url],[窗口名称],[参数字符串]);/*URL：可选参数，在窗口中要显示网页的网址或路径。如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。窗口名称：可选参数，被打开窗口的名称。 1.该名称由字母、数字和下划线字符组成。 2."_top"、"_blank"、"_self"具有特殊意义的名称。 _blank：在新窗口显示目标网页 _self：在当前窗口显示目标网页 _top：框架网页中在上部窗口中显示目标网页 3.相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。 4.name 不能包含有空格。参数字符串：可选参数，设置窗口参数，各参数用逗号隔开。*/ 参数表 参数 值 说明 top Number 窗口顶部离开屏幕顶部的像素数 left Number 窗口左端离开屏幕的像素数 width Number 窗口的宽度 height Number 窗口的高度 menubar yes,no 窗口有没有菜单 toolbar yes,no 窗口有没有工具条 scrollbar yes,no 窗口有没有滚动条 status yes,no 窗口有没有状态栏 关闭新窗口（window.close）用法 12345window.close(); //关闭本窗口&lt;窗口对象&gt;.close(); //关闭指定的窗口//例var myWin = window.open("http://www.baidu.com");myWin.close(); 综合练习 任务1、新窗口打开时弹出确认框，是否打开 12&gt; 提示: 使用 if 判断确认框是否点击了确定，如点击弹出输入对话框，否则没有任何操作。&gt; 2、通过输入对话框，确定打开的网址，默认为 http：//www.imooc.com/ 3、打开的窗口要求，宽400像素，高500像素，无菜单栏、无工具栏。 12345678function openWindow() &#123; if (confirm("确认打开新窗口？")) &#123; var url = prompt("请输入要打开的网址", "http://www.imooc.com"); if (url != null) &#123; window.open(url,"_blank","width=400,height=500,menubar=no,toolbar=no"); &#125; else &#123; url = prompt("请重新输入网址"); &#125; &#125;&#125; html部分 1&lt;button onclick="openWindow()"&gt;打开新窗口&lt;/button&gt; js-DOM操作什么是DOM 文档对象模型DOM（Document Object Model）定义访问和处理HTML文档的标准方法。DOM 将HTML文档呈现为带有元素、属性和文本的树结构（节点树）。 HTML文档可以说是由节点构成的集合，三种常见的DOM节点 元素节点：、、等L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","model":{"jsonPath":"live2d-widget-model-wanko"},"display":{"position":"right","width":150,"height":300},"mobile":{"show":true},"log":false,"tagMode":false}); 文本节点：向用户展示的内容，如…中的JavaScript、DOM、CSS等文本。 属性节点：元素属性，如标签的链接属性href=”http://www.baidu.com&quot; 通过id获取元素1document.getElementById("id"); innerHTML属性1Object.innerHTML; 注：Object是获取的元素对象，如通过document.getElementById(“id”)获取的元素。 改变HTML样式1Object.style.property = new style; 常用属性表（property）: 属性 描述 backgroundColor 背景颜色 height 高度 width 宽度 color 文本颜色 font 在一行设置所有字体属性 display 显示或隐藏（block/none） fontSize 字体大小 案例 在下方代码块中，第12行补充代码，修改h2标签的样式，将颜色设为红色。 在下方代码块中，第13行补充代码，修改h2标签的样式，将背景颜色设为灰色(#CCC)。 在下方代码块中，第14行补充代码，修改h2标签的样式，将宽设为300px。 1234567891011121314151617&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;&lt;title&gt;style样式&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h2 id="con"&gt;I love JavaScript&lt;/H2&gt; &lt;p&gt; JavaScript使网页显示动态效果并实现与用户交互功能。&lt;/p&gt; &lt;script type="text/javascript"&gt; var mychar= document.getElementById("con"); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 答案： 123con.style.color = "red"; con.style.backgroundColor = "#ccc"; con.style.width = "300px"; js改变class1Object.className = "new className"; //js中的className属性对应HTML中的class属性 综合实践-根据提示补全代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" Content="text/html; charset=utf-8" /&gt;&lt;title&gt;javascript&lt;/title&gt;&lt;style type="text/css"&gt;body&#123;font-size:12px;&#125;#txt&#123; height:400px; width:600px; border:#333 solid 1px; padding:5px;&#125;p&#123; line-height:18px; text-indent:2em;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h2 id="con"&gt;JavaScript课程&lt;/H2&gt; &lt;div id="txt"&gt; &lt;h5&gt;JavaScript为网页添加动态效果并实现与用户交互的功能。&lt;/h5&gt; &lt;p&gt;1. JavaScript入门篇，让不懂JS的你，快速了解JS。&lt;/p&gt; &lt;p&gt;2. JavaScript进阶篇，让你掌握JS的基础语法、函数、数组、事件、内置对象、BOM浏览器、DOM操作。&lt;/p&gt; &lt;p&gt;3. 学完以上两门基础课后，在深入学习JavaScript的变量作用域、事件、对象、运动、cookie、正则表达式、ajax等课程。&lt;/p&gt; &lt;/div&gt; &lt;form&gt; &lt;!--当点击相应按钮，执行相应操作，为按钮添加相应事件--&gt; &lt;input type="button" value="改变颜色" &gt; &lt;input type="button" value="改变宽高" &gt; &lt;input type="button" value="隐藏内容" &gt; &lt;input type="button" value="显示内容" &gt; &lt;input type="button" value="取消设置" &gt; &lt;/form&gt; &lt;script type="text/javascript"&gt;//定义"改变颜色"的函数//定义"改变宽高"的函数//定义"隐藏内容"的函数//定义"显示内容"的函数//定义"取消设置"的函数 &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 参考 123456789101112131415161718192021222324252627282930var btns = document.getElementsByTagName("input");var txt = document.getElementById("txt");//定义"改变颜色"的函数btns[0].onclick = function()&#123; txt.style.color = "#fff"; txt.style.backgroundColor = "red";&#125;//定义"改变宽高"的函数btns[1].onclick = function()&#123; txt.style.width = "800px"; txt.style.height = "300px";&#125;//定义"隐藏内容"的函数btns[2].onclick = function()&#123; txt.style.display = "none";&#125;//定义"显示内容"的函数btns[3].onclick = function()&#123; txt.style.display = "block";&#125;//定义"取消设置"的函数btns[4].onclick = function()&#123; if(confirm("是否取消设置"))&#123; txt.removeAttribute("style"); &#125;&#125;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[node学习笔记-day1]]></title>
    <url>%2F%5Bobject%20Object%5D%2Fnode%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day1%2F</url>
    <content type="text"><![CDATA[Node.js简介Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。 node适合用来做什么Node.js 可以解析JS代码（没有浏览器安全级别的限制）提供很多系统级别的API，如： 文件的读写 进程的管理 网络通信 …… 启用服务器1234567891011//引包let http = require("http");//创建服务器，参数是一个回调函数，表示如果有请求进来，要做什么let server = http.createServer(function (req, res) &#123; //req表示请求,request;res表示响应,response //设置Http头部，状态码是200，文件类型是html，字符集是utf8 res.writeHead(200, &#123;"Content-type": "text/html;charset=UTF-8"&#125;); res.end("hello,node");&#125;);//运行服务器，监听3000端口（端口号可以任意更改）server.listen(80); 注意事项： 如果想修改程序，必须中断当前运行的服务器，重新node一次，刷新，才行。 Node.js是服务器的程序，写的js语句，都将运行在服务器上。返回给客户的，都是已经处理好的纯html。 ctrl+c，就可以打断挂起的服务器程序。此时按上箭头，能够快速调用最近的node命令 cls可以清屏 我们本地写一个js，不能直接拖入浏览器运行，但是有了node，我们任何一个js文件，都可以通过node来运行。也就是说，node就是一个js的执行环境。 我们现在，要跑起来一个服务器，要以.js存储、用node命令运行这个js文件。 node没有文件夹的概念12345678910111213141516171819// require表示引包，意思是引用自己的一个功能var http = require("http");var fs = require("fs");// 创建服务器，参数是一个回调函数，表示如果有请求进来，要做什么var server = http.createServer(function(req,res)&#123; if(req.url == "/fang")&#123; fs.readFile("./test/xixi.html",function (err,data) &#123; //req表示请求，request;res表示响应,response //设置HTTP头部，状态码是200，文件类型是html，字符集是utf-8 res.writeHead(200,&#123;"Content-type":"text/html;charset=UTF-8"&#125;); res.end(data); &#125;); &#125;else&#123; res.writeHead(404,&#123;"Content-type":"text/html;charset=UTF-8"&#125;); res.end("xixi,没有这个页面呦"); &#125;&#125;);// 运行服务器，监听3030端口（端口号可以自己随便改）server.listen(3030,"127.0.0.1"); 以上代码，运行后浏览器里的结果会是啥？ “xixi,没有这个页面呦” 原因就是在node中没有文件夹的概念 HTTP模块Node.js中，将很多的功能，划分为了一个个node_modules，大陆的书翻译为模块；台湾的书，翻译为模组。这是因为，有一些程序需要使用fs功能（文件读取功能），有一些不用的，所以为了效率，你用什么，你就require什么。官网api:http://nodejs.org/api/ 示例123456789101112// 引用模块var http = require("http");// 创建一个服务器，回调函数表示接收到请求之后做的事情var server = http.createServer(function(req,res)&#123; //req参数表示请求，res表示响应 console.log("服务器接收到了请求"+req.url); //设置头部 res.writeHead(200,&#123;"Content-Type":"text/html;charset=UTF8"&#125;); res.end();&#125;);//监听端口server.listen(2020,"localhost"); 注意： response.end();必写，否则会认为请求没有结束 response.writeHead(200,{“Content-Type”:”text/html;charset=UTF8”});设置一个响应头 编码为utf-8 response.write(“”);内容必须为字符串 URL模块 req.url属性，表示用户的请求URL地址。所有的路由设计，都是通过req.url来实现的。 识别URL，用到两个新模块，第一个就是url模块，第二个就是querystring模块 字符串查询，用querystring处理 1234567querystring.parse('foo=bar&amp;baz=qux&amp;baz=quux&amp;corge')// returns &#123; foo: 'bar', baz: ['qux', 'quux'], corge: '' &#125; fs模块1234567891011121314151617//1. 导入文件系统fs依赖 var fs = require('fs');//2. 读取 // 同步读取 var data = fs.readFileSync('data.txt'); // 打印出来,原生是buffer数据,需要转码 console.log(data.toString()); console.log('结束');// 3.node.js的回调函数// node.js的异步编程的直接体现就是回调函数.// 异步读取var time = new Date();fs.readFile('data.txt', function (err,data) &#123; console.log(data.toString()); console.log('读取本地文件耗时:' + (new Date() - time)+'毫秒');&#125;);console.log('完毕'); 123456readFile();// 读取文件//-&gt;fs.readFile(path,[option],callback)//-&gt;callback函数有两个参数function(err,data)&#123;&#125;//1).err是读取文件失败后出发的错误对象//2).data是从文件中读取的数据. 12345678910111213.writeFile()// 写入文件-&gt;fs.writeFile(path,data,[option],callback)var str = '此情此景,我想吟诗一首!'fs.writeFile('data1.txt', str, function (err) &#123;if (err) &#123; throw err; &#125;console.log('写入成功!');&#125;);//默认的第三个参数是&#123;flag='w'&#125;,是写的操作.会清空掉文件.如果想要追加内容,可以设置&#123;flag='a'&#125;fs.writeFile('data1.txt', str,&#123;flag:'a'&#125;, function (err) &#123;if (err) &#123;throw err;&#125;console.log('写入成功!');&#125;);//&#123;flag:'w'&#125;为默认值,w代表写文件,a代表追加内容 // 今天先到这吧 眼睛痛]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F%5Bobject%20Object%5D%2Fhello-world%2F</url>
    <content type="text"><![CDATA[最近几周开始接触了git和GitHub,偶然看到可以用GitHub提供的pages服务基于Hexo免费搭建个人博客，周末闲来无事就看着Hexo的官方文档自己搭了一个。虽然步骤不多，也不麻烦，但是还是碰到了许多问题，还好有万能的度娘，每当我迷失方向时总会指引我走出迷途。 ​ 下面先写一下通过Hexo创建文章时的几条常用命令，以后闲了的话会把我搭建博客配置各种东西的步骤完整的总结出来。 基本操作执行下列命令来创建一篇新文章。1$ hexo new "My New Post" More info: 写作 开启本地服务器1$ hexo server More info: Server 生成文件1$ hexo generate More info: Generating 部署1$ hexo deploy More info: Deployment 监视文件变动Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。 1$ hexo generate --watch 完成后部署可以执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。 12$ hexo generate --deploy$ hexo deploy --generate 简写123# 上面两个命令可以简写为$ hexo g -d$ hexo d -g]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
</search>
